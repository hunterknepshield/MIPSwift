# This is an input file for testing.

:ad
:ae

		.data
string:
		.ascii "This is a string in the data segment." # This is a comment after the string
string2:
		.asciiz "This is another string!\n" # Putting a double-quote in a comment confuses things still
		.align 2
array:	.space 16				# Space for 4 words (4*4 bytes)
		.asciiz "Right after \".space\""

read_string:
		.space 32
		.align 2
prefilled_array:
		.word 1 2 3 4 5 6 7 8 9

		.text
beginning:
		li  $t0, -1				# 0x0xffff ffff
		li  $t1, 1
		li  $t2, 2
		li  $t3, 32767			# INT16_MAX (0x7fff -> 0x0000 7fff)
		li	$t4, 32768			# INT16_MAX + 1 (0x0000 8000)
		li	$t5, -32768			# INT16_MIN (0x8000 -> 0xFFFF 8000)
		li	$s0, 1
		li	$s1, 65
		li	$s2, 66
		li	$s3, 100
		sw	$s0, 0($sp)
		sw	$s1, -4($sp)
		sw	$s2, -8($sp)
		sw	$s3, -12($sp)
		addi	$sp, $sp, -12
		add	$t1, $t1, $t1
		la	$a0, string
		li	$v0, 4
		syscall

# Sums numbers from 0 to 9
#test_loop:
#		li	$t0, 0				# Accumulator
#		li	$s0, 0				# Loop counter
#		li	$s1, 10				# Loop sentinel
#loop:
#		add	$t0, $t0, $s0
#		addi	$s0, $s0, 1		# Counter++
#		bne	$s0, $s1, loop		# Keep looping until s0 == 10
#
#		li	$s0, 0
#		li	$s1, 10
#loop2:
#		add	$t0, $t0, $s0
#		addi	$s0, $s0, 1
#		bne	$s0, $s1, loop2
#
#done:
#		syscall

# Reads 4 integers
#		la	$s2, array
#		move	$s0, $s2
#		addi	$s1, $s2, 16
#read_loop:
#		li	$v0, 5
#		syscall
#		sw	$v0, 0($s0)
#		addi	$s0, $s0, 4
#		bne	$s0, $s1, read_loop

#		li	$v0, 8
#		la	$a0, read_string
#		li	$a1, 32
#		syscall
